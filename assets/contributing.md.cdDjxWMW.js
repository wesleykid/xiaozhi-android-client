import{_ as s,c as a,o as l,ae as e}from"./chunks/framework.BwJUVDD3.js";const c=JSON.parse('{"title":"贡献指南","description":"如何为 android-xiaozhi 项目贡献代码","frontmatter":{"title":"贡献指南","description":"如何为 android-xiaozhi 项目贡献代码","sidebar":false,"outline":"deep"},"headers":[],"relativePath":"contributing.md","filePath":"contributing.md"}'),t={name:"contributing.md"};function n(h,i,p,d,o,r){return l(),a("div",null,i[0]||(i[0]=[e(`<div class="contributing-page"><h1 id="贡献指南" tabindex="-1">贡献指南 <a class="header-anchor" href="#贡献指南" aria-label="Permalink to &quot;贡献指南&quot;">​</a></h1><div class="header-content"><h2>如何为 android-xiaozhi 项目贡献代码 🚀</h2></div><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>感谢您对 android-xiaozhi 项目感兴趣！我们非常欢迎社区成员参与贡献，无论是修复错误、改进文档还是添加新功能。本指南将帮助您了解如何向项目提交贡献。</p><h2 id="开发环境准备" tabindex="-1">开发环境准备 <a class="header-anchor" href="#开发环境准备" aria-label="Permalink to &quot;开发环境准备&quot;">​</a></h2><h3 id="基本要求" tabindex="-1">基本要求 <a class="header-anchor" href="#基本要求" aria-label="Permalink to &quot;基本要求&quot;">​</a></h3><ul><li>Flutter SDK 3.7.0 或更高版本</li><li>Dart SDK 3.7.0 或更高版本</li><li>Git 版本控制系统</li><li>Android Studio 或 Visual Studio Code (带 Flutter 插件)</li><li>Android SDK (用于 Android 开发)</li><li>Xcode (用于 iOS 开发，仅 macOS)</li></ul><h3 id="获取源代码" tabindex="-1">获取源代码 <a class="header-anchor" href="#获取源代码" aria-label="Permalink to &quot;获取源代码&quot;">​</a></h3><ol><li><p>首先，在 GitHub 上 Fork 本项目到您自己的账号</p><ul><li>访问 <a href="https://github.com/TOM88812/xiaozhi-android-client" target="_blank" rel="noreferrer">android-xiaozhi 项目页面</a></li><li>点击右上角的&quot;Fork&quot;按钮</li><li>等待 Fork 完成，您将被重定向到您的仓库副本</li></ul></li><li><p>克隆您 fork 的仓库到本地：</p></li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/YOUR_USERNAME/xiaozhi-android.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xiaozhi-android-client</span></span></code></pre></div><ol start="3"><li>添加上游仓库作为远程源：</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upstream</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/TOM88812/xiaozhi-android-client.git</span></span></code></pre></div><p>你可以使用 <code>git remote -v</code> 命令确认远程仓库已正确配置：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 应显示：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># origin    https://github.com/YOUR_USERNAME/xiaozhi-android-client.git (fetch)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># origin    https://github.com/YOUR_USERNAME/xiaozhi-android-client.git (push)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># upstream  https://github.com/TOM88812/xiaozhi-android-client.git (fetch)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># upstream  https://github.com/TOM88812/xiaozhi-android-client.git (push)</span></span></code></pre></div><h3 id="安装开发依赖" tabindex="-1">安装开发依赖 <a class="header-anchor" href="#安装开发依赖" aria-label="Permalink to &quot;安装开发依赖&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装Flutter依赖</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flutter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pub</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span></span></code></pre></div><h2 id="开发流程" tabindex="-1">开发流程 <a class="header-anchor" href="#开发流程" aria-label="Permalink to &quot;开发流程&quot;">​</a></h2><h3 id="与主仓库保持同步" tabindex="-1">与主仓库保持同步 <a class="header-anchor" href="#与主仓库保持同步" aria-label="Permalink to &quot;与主仓库保持同步&quot;">​</a></h3><p>在开始工作之前，确保您的本地仓库与主项目保持同步是非常重要的。以下是同步本地仓库的步骤：</p><ol><li>切换到您的主分支（<code>main</code>）：</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span></span></code></pre></div><ol start="2"><li>拉取上游仓库的最新更改：</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fetch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upstream</span></span></code></pre></div><ol start="3"><li>将上游主分支的更改合并到您的本地主分支：</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> merge</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upstream/main</span></span></code></pre></div><ol start="4"><li>将更新后的本地主分支推送到您的 GitHub 仓库：</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span></span></code></pre></div><h3 id="创建分支" tabindex="-1">创建分支 <a class="header-anchor" href="#创建分支" aria-label="Permalink to &quot;创建分支&quot;">​</a></h3><p>在开始任何工作之前，请确保从最新的上游主分支创建新的分支：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 获取最新的上游代码（如上节所述）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fetch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upstream</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feature/your-feature-name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upstream/main</span></span></code></pre></div><p>为分支命名时，可以遵循以下约定：</p><ul><li><code>feature/xxx</code>：新功能开发</li><li><code>fix/xxx</code>：修复 bug</li><li><code>docs/xxx</code>：文档更新</li><li><code>test/xxx</code>：测试相关工作</li><li><code>refactor/xxx</code>：代码重构</li></ul><h3 id="编码规范" tabindex="-1">编码规范 <a class="header-anchor" href="#编码规范" aria-label="Permalink to &quot;编码规范&quot;">​</a></h3><p>我们使用 Flutter 官方推荐的代码风格指南。在提交代码前，请确保您的代码符合以下要求：</p><ul><li>使用 2 个空格进行缩进</li><li>行长度不超过 120 个字符</li><li>使用有意义的变量和函数名称</li><li>为公共 API 添加文档注释</li><li>使用 Dart 类型系统</li></ul><p>我们推荐使用 Flutter 的静态代码分析工具来帮助您遵循编码规范：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用 dart analyze 检查代码</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flutter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> analyze</span></span></code></pre></div><h3 id="测试" tabindex="-1">测试 <a class="header-anchor" href="#测试" aria-label="Permalink to &quot;测试&quot;">​</a></h3><p>在提交之前，请确保所有测试都能通过：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flutter</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span></span></code></pre></div><h2 id="提交变更" tabindex="-1">提交变更 <a class="header-anchor" href="#提交变更" aria-label="Permalink to &quot;提交变更&quot;">​</a></h2><h3 id="提交前的检查清单" tabindex="-1">提交前的检查清单 <a class="header-anchor" href="#提交前的检查清单" aria-label="Permalink to &quot;提交前的检查清单&quot;">​</a></h3><p>在提交您的代码之前，请确保完成以下检查：</p><ol><li>代码是否符合 Flutter 编码规范</li><li>是否添加了必要的测试用例</li><li>所有测试是否通过</li><li>是否添加了适当的文档</li><li>是否解决了您计划解决的问题</li><li>是否与最新的上游代码保持同步</li></ol><h3 id="提交变更-1" tabindex="-1">提交变更 <a class="header-anchor" href="#提交变更-1" aria-label="Permalink to &quot;提交变更&quot;">​</a></h3><p>在开发过程中，养成小批量、频繁提交的习惯。这样可以使您的更改更容易跟踪和理解：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看更改的文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> status</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 暂存更改</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lib/feature.dart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test/feature_test.dart</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 提交更改</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;feat: add new feature X&quot;</span></span></code></pre></div><h3 id="解决冲突" tabindex="-1">解决冲突 <a class="header-anchor" href="#解决冲突" aria-label="Permalink to &quot;解决冲突&quot;">​</a></h3><p>如果您在尝试合并上游更改时遇到冲突，请按照以下步骤解决：</p><ol><li>首先了解冲突的位置：</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> status</span></span></code></pre></div><ol start="2"><li>打开冲突文件，您会看到类似以下标记：</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>上游代码</span></span></code></pre></div><ol start="3"><li>修改文件以解决冲突，删除冲突标记</li><li>解决完所有冲突后，暂存并提交：</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;fix: resolve merge conflicts&quot;</span></span></code></pre></div><h3 id="提交规范" tabindex="-1">提交规范 <a class="header-anchor" href="#提交规范" aria-label="Permalink to &quot;提交规范&quot;">​</a></h3><p>我们使用<a href="https://www.conventionalcommits.org/zh-hans/" target="_blank" rel="noreferrer">约定式提交</a>规范来格式化 Git 提交消息。提交消息应该遵循以下格式：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;类型&gt;[可选 作用域]: &lt;描述&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[可选 正文]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[可选 脚注]</span></span></code></pre></div><p>常用的提交类型包括：</p><ul><li><code>feat</code>：新功能</li><li><code>fix</code>：错误修复</li><li><code>docs</code>：文档更改</li><li><code>style</code>：不影响代码含义的变更（如空格、格式化等）</li><li><code>refactor</code>：既不修复错误也不添加功能的代码重构</li><li><code>perf</code>：提高性能的代码更改</li><li><code>test</code>：添加或修正测试</li><li><code>chore</code>：对构建过程或辅助工具和库的更改</li></ul><p>例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>feat(tts): 添加新的语音合成引擎支持</span></span>
<span class="line"><span></span></span>
<span class="line"><span>添加对百度语音合成API的支持，包括以下功能：</span></span>
<span class="line"><span>- 支持多种音色选择</span></span>
<span class="line"><span>- 支持语速和音量调节</span></span>
<span class="line"><span>- 支持中英文混合合成</span></span>
<span class="line"><span></span></span>
<span class="line"><span>修复 #123</span></span></code></pre></div><h3 id="推送更改" tabindex="-1">推送更改 <a class="header-anchor" href="#推送更改" aria-label="Permalink to &quot;推送更改&quot;">​</a></h3><p>完成代码更改后，将您的分支推送到您的 GitHub 仓库：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feature/your-feature-name</span></span></code></pre></div><p>如果您已经创建了 Pull Request，并且需要更新它，只需再次推送到同一分支即可：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在进行更多更改后</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;refactor: improve code based on feedback&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feature/your-feature-name</span></span></code></pre></div><h3 id="创建-pull-request-前同步最新代码" tabindex="-1">创建 Pull Request 前同步最新代码 <a class="header-anchor" href="#创建-pull-request-前同步最新代码" aria-label="Permalink to &quot;创建 Pull Request 前同步最新代码&quot;">​</a></h3><p>在创建 Pull Request 前，建议再次与上游仓库同步，以避免潜在的冲突：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 获取上游最新代码</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fetch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upstream</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将上游最新代码变基到您的特性分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rebase</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upstream/main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果出现冲突，解决冲突并继续变基</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rebase</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --continue</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 强制推送更新后的分支到您的仓库</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --force-with-lease</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feature/your-feature-name</span></span></code></pre></div><p>注意：使用 <code>--force-with-lease</code> 比直接使用 <code>--force</code> 更安全，它可以防止覆盖他人推送的更改。</p><h3 id="创建-pull-request" tabindex="-1">创建 Pull Request <a class="header-anchor" href="#创建-pull-request" aria-label="Permalink to &quot;创建 Pull Request&quot;">​</a></h3><p>当您完成功能开发或问题修复后，请按照以下步骤创建 Pull Request：</p><ol><li>将您的更改推送到 GitHub：</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> feature/your-feature-name</span></span></code></pre></div><ol start="2"><li><p>访问 GitHub 上您 fork 的仓库页面，点击 &quot;Compare &amp; pull request&quot; 按钮</p></li><li><p>填写 Pull Request 表单：</p><ul><li>使用清晰的标题，遵循提交消息格式</li><li>在描述中提供详细信息</li><li>引用相关 issue（使用 <code>#issue编号</code> 格式）</li><li>如果这是一个进行中的工作，请添加 <code>[WIP]</code> 前缀到标题</li></ul></li><li><p>提交 Pull Request，等待项目维护者审核</p></li></ol><h3 id="pull-request-的生命周期" tabindex="-1">Pull Request 的生命周期 <a class="header-anchor" href="#pull-request-的生命周期" aria-label="Permalink to &quot;Pull Request 的生命周期&quot;">​</a></h3><ol><li><strong>创建</strong>：提交您的 PR</li><li><strong>CI 检查</strong>：自动化测试和代码风格检查</li><li><strong>代码审核</strong>：维护者会审核您的代码并提供反馈</li><li><strong>修订</strong>：根据反馈修改您的代码</li><li><strong>批准</strong>：一旦您的 PR 被批准</li><li><strong>合并</strong>：维护者会将您的 PR 合并到主分支</li></ol><h2 id="文档贡献" tabindex="-1">文档贡献 <a class="header-anchor" href="#文档贡献" aria-label="Permalink to &quot;文档贡献&quot;">​</a></h2><p>如果您想改进项目文档，请按照以下步骤操作：</p><ol><li><p>按照上述步骤 Fork 项目并克隆到本地</p></li><li><p>文档位于 <code>documents/docs</code> 目录下，使用 Markdown 格式</p></li><li><p>安装文档开发依赖：</p></li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> documents</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><ol start="4"><li>启动本地文档服务器：</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docs:dev</span></span></code></pre></div><ol start="5"><li><p>在浏览器中访问 <code>http://localhost:5173/xiaozhi-android/</code> 预览您的更改</p></li><li><p>完成更改后，提交您的贡献并创建 Pull Request</p></li></ol><h3 id="文档编写准则" tabindex="-1">文档编写准则 <a class="header-anchor" href="#文档编写准则" aria-label="Permalink to &quot;文档编写准则&quot;">​</a></h3><ul><li>使用清晰、简洁的语言</li><li>提供实际示例</li><li>对复杂概念进行详细解释</li><li>包含适当的截图或图表（需要时）</li><li>避免技术术语过多，必要时提供解释</li><li>保持文档结构一致</li></ul><h2 id="问题反馈" tabindex="-1">问题反馈 <a class="header-anchor" href="#问题反馈" aria-label="Permalink to &quot;问题反馈&quot;">​</a></h2><p>如果您发现了问题但暂时无法修复，请在 GitHub 上<a href="https://github.com/huangjunsen0406/xiaozhi-android/issues/new" target="_blank" rel="noreferrer">创建 Issue</a>。创建 Issue 时，请包含以下信息：</p><ul><li>问题的详细描述</li><li>重现问题的步骤</li><li>预期行为和实际行为</li><li>您的操作系统和 Python 版本</li><li>相关的日志输出或错误信息</li></ul><h2 id="代码审核" tabindex="-1">代码审核 <a class="header-anchor" href="#代码审核" aria-label="Permalink to &quot;代码审核&quot;">​</a></h2><p>提交 Pull Request 后，项目维护者将会审核您的代码。在代码审核过程中：</p><ul><li>请耐心等待反馈</li><li>及时响应评论和建议</li><li>必要时进行修改并更新您的 Pull Request</li><li>保持礼貌和建设性的讨论</li></ul><h3 id="处理代码审核反馈" tabindex="-1">处理代码审核反馈 <a class="header-anchor" href="#处理代码审核反馈" aria-label="Permalink to &quot;处理代码审核反馈&quot;">​</a></h3><ol><li>认真阅读所有评论和建议</li><li>针对每个要点作出回应或更改</li><li>如果您不同意某个建议，礼貌地解释您的理由</li><li>修改完成后，在 PR 中留言通知审核者</li></ol><h2 id="成为项目维护者" tabindex="-1">成为项目维护者 <a class="header-anchor" href="#成为项目维护者" aria-label="Permalink to &quot;成为项目维护者&quot;">​</a></h2><p>如果您持续为项目做出有价值的贡献，您可能会被邀请成为项目的维护者。作为维护者，您将有权限审核和合并其他人的 Pull Request。</p><h3 id="维护者的职责" tabindex="-1">维护者的职责 <a class="header-anchor" href="#维护者的职责" aria-label="Permalink to &quot;维护者的职责&quot;">​</a></h3><ul><li>审核 Pull Request</li><li>管理 issue</li><li>参与项目规划</li><li>回答社区问题</li><li>帮助引导新贡献者</li></ul><h2 id="行为准则" tabindex="-1">行为准则 <a class="header-anchor" href="#行为准则" aria-label="Permalink to &quot;行为准则&quot;">​</a></h2><p>请尊重所有项目参与者，遵循以下行为准则：</p><ul><li>使用包容性语言</li><li>尊重不同的观点和经验</li><li>优雅地接受建设性批评</li><li>关注社区最佳利益</li><li>对其他社区成员表示同理心</li></ul><h2 id="常见问题解答" tabindex="-1">常见问题解答 <a class="header-anchor" href="#常见问题解答" aria-label="Permalink to &quot;常见问题解答&quot;">​</a></h2><h3 id="我应该从哪里开始贡献" tabindex="-1">我应该从哪里开始贡献？ <a class="header-anchor" href="#我应该从哪里开始贡献" aria-label="Permalink to &quot;我应该从哪里开始贡献？&quot;">​</a></h3><ol><li>查看标记为 &quot;good first issue&quot; 的问题</li><li>修复文档中的错误或不清晰的部分</li><li>添加更多测试用例</li><li>解决您自己在使用过程中发现的问题</li></ol><h3 id="我提交的-pr-已经很久没有回应了-我该怎么办" tabindex="-1">我提交的 PR 已经很久没有回应了，我该怎么办？ <a class="header-anchor" href="#我提交的-pr-已经很久没有回应了-我该怎么办" aria-label="Permalink to &quot;我提交的 PR 已经很久没有回应了，我该怎么办？&quot;">​</a></h3><p>在 PR 中留言，礼貌地询问是否需要进一步的改进或澄清。请理解维护者可能很忙，需要一些时间来审核您的贡献。</p><h3 id="我可以贡献哪些类型的更改" tabindex="-1">我可以贡献哪些类型的更改？ <a class="header-anchor" href="#我可以贡献哪些类型的更改" aria-label="Permalink to &quot;我可以贡献哪些类型的更改？&quot;">​</a></h3><ul><li>错误修复</li><li>新功能</li><li>性能改进</li><li>文档更新</li><li>测试用例</li><li>代码重构</li></ul><h2 id="致谢" tabindex="-1">致谢 <a class="header-anchor" href="#致谢" aria-label="Permalink to &quot;致谢&quot;">​</a></h2><p>再次感谢您为项目做出贡献！您的参与对我们非常重要，共同努力让 android-xiaozhi 变得更好！</p></div>`,1)]))}const u=s(t,[["render",n]]);export{c as __pageData,u as default};
